#!/bin/sh

set -o noclobber  # Avoid overlay files (echo "hi" > foo)
set -o errexit    # Used to exit upon error, avoiding cascading errors
set -o pipefail   # Unveils hidden failures
set -o nounset    # Exposes unset variables
set -o errtrace   # Trace error LINENO

trap 'echo Error at $LINENO' ERR

MIN_HUE_DISTANCE=80

# MX_CC=( UNO DOS C{00..15} )
MX_CC=( UNO DOS C01 C09 C02 C10 C03 C11 C04 C12 C05 C13 C06 C14 C00 C08 C07 C15)

if ! command -v pastel &> /dev/null; then 
  echo "pastel not found."
  echo " ==> https://github.com/sharkdp/pastel#installation"
  exit 1
fi

mkdir out 2> /dev/null || true

logv () { while [ "${1:-}" ]; do echo "${1} ${!1}"; shift; done; }

mix () { pastel mix $*; }
paint () { pastel paint $*; }
format () { pastel format hex $*; }
lighten () { pastel lighten $*; }
saturate () { pastel saturate $*; }
textcolor () { pastel textcolor $*; }
set_lightness () { pastel set hsl-lightness $*; }
set_saturation () { pastel set hsl-saturation $*; }

diff_real () { echo "df=($1 - $2); if (df < 0) { df=df* -1}; print df" | bc -l; }

generate_seed () {
  local strategy="$1"
  local attempt="${2:-1}"

  logv attempt

  declare -g UNO="$(pastel random -n 1 -s "$1" | format)"
  declare -g DOS="$(pastel random -n 1 -s "$1" | format)"

  local uno_hue; uno_hue="$(pastel format hsl-hue "$UNO")"
  local dos_hue; dos_hue="$(pastel format hsl-hue "$DOS")"

  (( $(echo "$uno_hue < 50" | bc) )) && uno_hue="$(echo "$uno_hue + 300" | bc)"
  (( $(echo "$dos_hue < 50" | bc) )) && dos_hue="$(echo "$dos_hue + 300" | bc)"

  local diff; diff=$(diff_real "$uno_hue" "$dos_hue")

  (( $(echo "$diff < $MIN_HUE_DISTANCE" | bc -l) )) &&
    generate_seed $strategy $((++attempt)) || true
}

generate_palette () {
  C00="$(set_saturation 0.08 "${UNO}" | set_lightness 0.1 | lighten 0.02 | format)"
  C08="$(set_saturation 0.08 "${UNO}" | set_lightness 0.2 | lighten 0.08 | format)"
  C07="$(set_saturation 0.08 "${UNO}" | set_lightness 0.3 | lighten 0.16 | format)"
  C15="$(set_saturation 0.08 "${UNO}" | set_lightness 0.4 | lighten 0.32 | format)"

  C01="$(mix ${UNO} Crimson   -f 0.5 | mix - HotPink           -f 0.4 | saturate 0.04 | format)"
  C02="$(mix ${UNO} Teal      -f 0.5 | mix - MediumSpringGreen -f 0.4 | saturate 0.04 | format)"
  C03="$(mix ${UNO} Yellow    -f 0.5 | mix - Coral             -f 0.4 | saturate 0.04 | format)"
  C04="$(mix ${UNO} RoyalBlue -f 0.5 | mix - DodgerBlue        -f 0.4 | saturate 0.04 | format)"
  C05="$(mix ${UNO} Orchid    -f 0.5 | mix - SlateBlue         -f 0.4 | saturate 0.04 | format)"
  C06="$(mix ${UNO} Cyan      -f 0.5 | mix - DeepSkyBlue       -f 0.4 | saturate 0.04 | format)"

  C09="$(lighten 0.10 "$C01" | format)"
  C10="$(lighten 0.10 "$C02" | format)"
  C11="$(lighten 0.10 "$C03" | format)"
  C12="$(lighten 0.10 "$C04" | format)"
  C13="$(lighten 0.10 "$C05" | format)"
  C14="$(lighten 0.10 "$C06" | format)"

  for x in "${MX_CC[@]}"; do export $x; done
}

demo () {
  for i in "${!MX_CC[@]}"; do
    local x=${MX_CC[i]}
    ! (( i % 2 )) && echo
    local fg=$(textcolor ${!x} | format)
    paint "${fg}" -n -o "${!x}" "$x ${!x}"
    (( i % 2 )) && echo
  done
  echo
}

save () {
  for file in ./templates/*; do
    local out="./out/$(basename $file)"
    envsubst < "$file" | tee $out &> /dev/null
    echo " ::> $out"
  done
}

main () {
  generate_seed ${1:-lch_hue}
  generate_palette
  save
  demo
}

main $*

